Lab Exercise on Text Processing with cut and paste

Objective: Enhance your understanding and proficiency 
with cut and paste commands by manipulating CSV data.

Run order_generator.py file to generate next files.
python3 order_generator.py 

Files :
user_emails.csv: Contains username,email.
user_orders.csv: Contains username,order_id.
user_addresses.csv: Contains username,street,city,zipcode.


Exercise 1: Extracting and Merging Specific Data

Scenario: We want to send a promotional email to all users 
living in a specific city, “Springfield”.

Tasks:
Extract Emails:

Extract the email addresses along with usernames and place them in a temporary file.

cut -d, -f1,2 user_emails.csv > temp_emails.csv

Explanation: -d, specifies the delimiter as a comma. 
-f1,2 instructs cut to extract fields 1 and 2 (username and email).


Extract Cities:
Extract only the city column from the addresses file.

cut -d, -f3 user_addresses.csv > temp_city.csv
Explanation: -f3 specifies that we want to extract the third field (city) only.

Combine Data:

paste -d, temp_emails.csv temp_city.csv > user_email_and_city.csv

Explanation: paste is merging the two temporary files by each line 
and the -d, flag sets the delimiter as a comma.

Filter Data:
Identify and extract users living in Springfield, using grep and cut.

grep 'Springfield' user_email_and_city.csv | cut -d, -f1,2 > springfield_users.csv

Explanation: grep searches for the specified pattern (Springfield). 
cut -d, -f1,2 extracts username and email.

Cleanup:

rm temp_emails.csv temp_city.csv
Explanation: rm removes the specified files.

Deliverable: A CSV file named springfield_users.csv containing 
usernames and emails of users from Springfield.


Exercise 2: Creating a Comprehensive User Info File
Scenario: You need to create a comprehensive information file that contains 
the username, email, order_id, street, city, and zipcode for each user, 
ensuring data integrity and correctness.

Tasks:

Combine Email and Order Data:

Use paste to concatenate user_emails.csv and user_orders.csv based on usernames.

paste -d, user_emails.csv user_orders.csv > temp_user_info.csv

Explanation: paste will merge the two files line by line. 
Ensure that the data aligns correctly by checking a few entries manually.

Validate Data Integrity:
Manually check a few entries in temp_user_info.csv to validate that username 
fields from both original files align correctly.

Note: If the username fields do not align correctly, additional sorting and manipulation using commands like sort might be needed before using paste.

Combine All Data:

Add address data to your temporary user information file.

paste -d, temp_user_info.csv user_addresses.csv > comprehensive_user_info.csv

Explanation: The above command concatenates user_addresses.csv data to 
our temporary user info file. Ensure that data, especially the username 
field, aligns and matches across entries.

Filter and Organize Data:

Using cut, rearrange the data to a readable format [username, email, order_id, street, city, zipcode].

cut -d, -f1,2,4,6,7,8 comprehensive_user_info.csv > final_user_info.csv

Explanation: This extracts the relevant fields only and organizes them in a coherent manner. 
Ensure to verify data for a few users to confirm that details are arranged as intended.

Data Cleanup:
rm temp_user_info.csv
Explanation: This removes the temporary data file, ensuring a clean working directory.

Deliverable: A CSV file named final_user_info.csv containing comprehensive 
user data arranged in a coherent format.

Extra: Of course it can be done in one line
paste -d, user_emails.csv user_orders.csv user_addresses.csv | cut -d, -f1,2,4,6,7,8 > final_user_info.csv

Explanation:

paste -d, user_emails.csv user_orders.csv user_addresses.csv: This concatenates the three files line by line using a comma as a delimiter.

|: This pipe takes the output from the previous paste command and uses it as input for the next command.

cut -d, -f1,2,4,6,7,8: This selects only the desired fields (columns) from the combined data.

> final_user_info.csv: This redirects the final output to a CSV file.

Important Note: 
This assumes that every line (user) of each file aligns correctly with the others, 
which might not always be the case in real-world scenarios. Validating the data integrity, 
especially when performing one-liners, is crucial to avoid mishandling of data. 
Always ensure to verify the results against expected outcomes and validate data 
for a few entries to assure the correctness of the operation.

If the datasets are not aligned correctly, you might need to employ sorting or 
other data manipulation techniques before combining the files, 
which might not be as straightforward in a one-liner.