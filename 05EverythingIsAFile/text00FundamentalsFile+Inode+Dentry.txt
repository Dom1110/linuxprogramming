=> File
In Linux, everything is treated as a file: 
regular files, directories, hardware devices, sockets, etc. 
This design approach simplifies interaction with different entities within the system. 
There are various types of files in Linux:

Regular Files: These are standard files that contain data, code, etc. 
They can be text files, binary files, etc.

Directories: These are special files that maintain a list of other files and directories.

Special Files: Represent device files, FIFOs, sockets, etc.

=> Inode

In the context of Linux filesystems, an inode (Index Node) is a data structure 
used to represent a filesystem object, which can be one of the various 
types of files mentioned earlier. 

Each inode contains metadata about a file system object, including:
File type (regular file, directory, symbolic link, etc.).
Permissions (read, write, execute attributes).
Ownership (user ID and group ID of the file).
Timestamps (creation time, modification time, etc.).
Size of the file.
Pointers to the data blocks that store the file's content.

Every file is associated with an inode, and this association is established 
through a unique inode number.


=> Dentry
Dentry (Directory Entry) is a concept in the Linux kernel that relates 
to the caching of directory entries to optimize lookups in the filesystem. 
It is essentially a representation of a single file or directory in the cache which contains:

Inode of the file.
File name.
Pointer to the parent dentry (if applicable).

Dentries help in reducing the time taken for path lookups 
as it temporarily stores (caches) the mapping of file paths to inode numbers, 
making file system operations faster.


=> Relationship Between Inode, Dentry, and File

The relationship between these elements can be described as:

File System Namespace: 
This is structured as a tree where files and directories are organized. 
Each node and leaf in this tree can be a file or a directory, 
which is represented in the filesystem through dentries.

File Metadata and Data: 
This is managed through inodes. 
Each file or directory has a corresponding 
inode that stores its metadata and pointers to its data.

Linking through Dentries: 
Dentries link file names to inodes, helping in translating 
human-readable file paths to inode numbers that the system 
can work with efficiently through caching mechanisms.

In a nutshell:
File: The abstraction used to represent various objects in the Linux filesystem.
Inode: The data structure holding metadata and data pointers for files.
Dentry: Cached representation of files and directories facilitating efficient lookup operations.

By working together, these elements form the Linux filesystem, 
ensuring efficient organization, storage, and retrieval of data.

These three fundamental concepts are at the core of how the filesystem in Linux (and many other Unix-like operating systems) is structured and operates.

Files are the basic units of data storage and representation in the filesystem.

Inodes are data structures that store metadata about files, including information about 
file type, permissions, ownership, timestamps, and data block pointers. 
They are crucial for file management and tracking on the filesystem.

Dentries (Directory Entries) play a vital role in mapping human-readable file and directory names to their corresponding inodes. 
They are essential for efficient path lookup and traversal within the filesystem.

Together, these concepts form the foundation upon which the entire filesystem is built 
and how files and directories are organized, tracked, and accessed. 
Understanding these pillars is key to comprehending the inner workings of Linux filesystems 
and effectively managing files and directories within them.

# refer to file_inode_dentry.py script 

# File abstraction, what is relevant only inode object
class File:
    def __init__(self, name, inode):
        self.name = name
        self.inode = inode

    def read(self):
        data_blocks = self.inode.data_block_pointers
        content = ""
        for block_number in data_blocks:
            content += f"Data Block {block_number}: {disk_space[block_number]}\n"
        return content

    def write(self, data):
        pass  # In this abstraction, writing to the file is not implemented.




# Defining the inode class which will store metadata about each file
# An inode object with pointers to data blocks where the file's content is stored
class Inode:
    def __init__(self, inode_number, file_type, permissions, size, data_block_pointers):
        self.inode_number = inode_number
        self.file_type = file_type
        self.permissions = permissions
        self.size = size
        self.data_block_pointers = data_block_pointers
        self.timestamps = {'creation': None, 'modification': None}



# Defining the dentry class to map file names to inodes and store in a cache
class Dentry:
    def __init__(self):
        self.dentry_cache = {}

    def add_dentry(self, file_name, file):
        self.dentry_cache[file_name] = file

    def lookup_dentry(self, file_name):
        return self.dentry_cache.get(file_name)



# Data blocks on the "disk" (for demonstration purposes)
disk_space = {
    1: "Data block 1: The actual content of the file (part 1)...",
    2: "Data block 2: The actual content of the file (part 2)...",
    3: "Data block 3: The actual content of the file (part 3)...",
    4: "",  # Empty data block for directories or unused blocks
    5: "",
    6: "",
}

# Creating a few Inode objects to represent different files and directories in our filesystem
inode1 = Inode(inode_number=1, file_type='regular file', permissions='rw-r--r--', size=1024, data_block_pointers=[1, 2, 3])
inode2 = Inode(inode_number=2, file_type='directory', permissions='rwxr-xr-x', size=4096, data_block_pointers=[4, 5, 6])

# Creating File and Directory objects that associate with specific Inodes
file1 = File(name='file1.txt', inode=inode1)
directory1 = File(name='my_directory', inode=inode2)

# Adding entries to the dentry cache, associating file and directory names with File objects
dentry_cache = Dentry()
dentry_cache.add_dentry(file1.name, file1)
dentry_cache.add_dentry(directory1.name, directory1)

# Demonstrating a lookup in the dentry cache to find a file or directory based on its name
name_to_lookup = 'file1.txt'
found_entry = dentry_cache.lookup_dentry(name_to_lookup)

if found_entry:
    if found_entry.inode.file_type == 'regular file':
        print(f"File '{name_to_lookup}' found with the following details:")
        print(f"  - Name: {found_entry.name}")
        print(f"  - Inode number: {found_entry.inode.inode_number}")
        print(f"  - File type: {found_entry.inode.file_type}")
        print(f"  - Permissions: {found_entry.inode.permissions}")
        print(f"  - Size: {found_entry.inode.size} bytes")
        print(f"  - Content:\n{found_entry.read()}")
    elif found_entry.inode.file_type == 'directory':
        print(f"Directory '{name_to_lookup}' found with the following details:")
        print(f"  - Name: {found_entry.name}")
        print(f"  - Inode number: {found_entry.inode.inode_number}")
        print(f"  - File type: {found_entry.inode.file_type}")
        print(f"  - Permissions: {found_entry.inode.permissions}")
else:
    print(f"Entry '{name_to_lookup}' not found in the file system.")
