Example # 1 CPU and Memory Info

System information and how to obtain the same information 
by looking directly at the files in the /proc directory.

CPU Information

Command: lscpu
The lscpu command displays information about the CPU architecture.

File: /proc/cpuinfo
The same information can be seen by viewing the contents of /proc/cpuinfo.

# Using lscpu to display CPU information
lscpu

# Viewing CPU information through /proc/cpuinfo
cat /proc/cpuinfo


Memory Information

Command: free
The free command displays the total amount of free and used physical and swap memory in the system, 
as well as the buffers and caches used by the kernel.

File: /proc/meminfo

The same details are available in /proc/meminfo, 
though free formats it in a more readable manner.

# Using free to display memory information
free -h

# Viewing memory information through /proc/meminfo
cat /proc/meminfo

Example # 2 History of commands

Check the Current History Size:

First, you can check the number of commands in the history.

history | wc -l
Execute a Command:
Then, execute any command, for example:

echo "Hello, World!"

Check the History Again:
Now, check the history once more.

history | wc -l
You should see the number has increased by one.

View the Last Entry in the History File:
You can view the most recent commands added to the history.

tail ~/.bash_history

When you execute the history command after running a few new commands, 
you will see these new commands added to the list. 
However, it's important to note that bash often writes to the history file after the session ends, 
so new commands may not immediately appear in the .bash_history file until you log out or the session ends, 
although they will appear in the output of the history command itself because it 
also keeps a session-specific history.

To force the history to write immediately, you can use the 
history -a command, which appends the session's history to the history file:

history -a

Now, if you tail the .bash_history file again, you should see the new commands reflected immediately.

Example 3: Establishing a TCP Connection and Observing Changes in /proc/net/tcp

Before the Connection:

Check current active connections using netstat or ss and take a note of them:

netstat -tnp
# or
ss -tnp
Save a snapshot of the current state of TCP connections:

cat /proc/net/tcp > /tmp/before-connection.txt

Establish the Connection:

Use nc (Netcat) or telnet to establish a new connection to example.com on port 80:

nc example.com 80
# or
telnet example.com 80

After the Connection:

Check the active connections again to verify the new connection:

netstat -tnp
# or
ss -tnp

The new connection to example.com should now be listed.

Take a new snapshot of the TCP connections after establishing the connection:

cat /proc/net/tcp > /tmp/after-connection.txt
Compare the two snapshots to see the new entry:

diff /tmp/before-connection.txt /tmp/after-connection.txt


The output from the diff command will highlight the changes between the two files, 
with the new entry corresponding to the connection you just initiated to example.com.


This example clearly demonstrates how the state of the system's network connections 
is directly reflected in the /proc/net/tcp file and how the difference between 
snapshots of this file before and after a change can reveal the nature of the change.

Example # 4 : Observing Open File Descriptors by a Python Script
1. Write a Python Script:

Create a file named file_wait.py with the following content:

# file_wait.py
with open('/tmp/testfile.txt', 'w') as f:
    print("File is open. Please enter any text and press enter:")
    user_input = input()
    f.write(user_input)
    print("You've written to the file!")


2. Run the Python Script:

Open a terminal and execute the script:

python3 file_wait.py
The script will open /tmp/testfile.txt and wait for your input, keeping the file open.

3. Find the Process ID (PID) of the Script:

Open a new terminal and find the PID of the running script:

ps aux | grep file_wait.py
Take note of the PID for the next step.

4. Check Open File Descriptors for the PID:

Before typing anything into the script's prompt, check the open file descriptors:

ls -l /proc/[PID]/fd

Replace [PID] with the actual PID you noted earlier. 
You should see various file descriptors, including one for /tmp/testfile.txt.

5. Provide Input to the Python Script:

Switch back to the terminal where the script is running and 
type some text at the prompt, then press enter.

6. Check Open File Descriptors Again:

After the script has finished writing to the file and exits, 
check the open file descriptors for the PID again:

ls -l /proc/[PID]/fd
If the script has finished and exited correctly, you may find that the PID directory no 
longer exists because the process has terminated. If the script is still running for some reason, 
you should not see the file descriptor for /tmp/testfile.txt anymore since the file context in 
the script has been exited and the file has been closed.

This example shows how the kernel assigns file descriptors to a process and how these are reflected in the 
/proc/[PID]/fd directory. When a file is opened, a new file descriptor appears in this directory, 
pointing to the file. When the file is closed, the file descriptor disappears from this directory, 
reflecting the change in the process's state.

Conclusion:
The provided examples demonstrate the practical relationship between the 
Linux Filesystem Hierarchy Standard (FHS) and the architecture of the Linux operating system,
particularly in how the system's state and activities are reflected through the file system.

Example 1: CPU and Memory Information

CPU Information: The lscpu command and the contents of /proc/cpuinfo offer insights into the CPU architecture. 
This shows how the /proc filesystem provides a window into the kernel's view of the hardware, making hardware characteristics available in a file-based format.

Memory Information: Similarly, the free command and /proc/meminfo provide details on memory usage. 
This underscores the FHSâ€™s role in system monitoring, with /proc exposing system memory information managed by the kernel.


Example 2: History of Commands

This example illustrates user-level interactions stored in the home directory (following FHS guidelines, which specify where user files should be kept). 
The .bash_history file is not part of the /proc filesystem but is a regular file stored in the user's home directory, recording the command history. 
The difference in how the history command and the .bash_history file are updated reflects the system's handling of session-specific data versus persistent data storage.

Example 3: TCP Connection Observations

Monitoring TCP connections via /proc/net/tcp demonstrates how network state information is dynamically managed and made accessible by the kernel. 
The /proc filesystem acts as a real-time interface to the kernel's networking stack, 
illustrating how the system architecture manages and reflects changes in network states through filesystem entries.


Example 4: Open File Descriptors by a Python Script

Observing the open file descriptors in /proc/[PID]/fd shows the system's real-time management of process resources. 
The /proc directory, part of the FHS, serves as a live reflection of process states, with each process ID having a corresponding subdirectory 
that includes details such as currently open file descriptors.


Final word:

In each of these examples, the Linux system architecture's use of the file system as a representation of system and hardware states is evident. 
The /proc filesystem, in particular, encapsulates the philosophy that everything is a file, providing a consistent interface to internal system information.

This transparency is a hallmark of Unix-like systems and allows for extensive scripting and automation capabilities, 
as well as ease of information retrieval and system introspection.

The FHS plays a crucial role in this architecture by dictating the structure and placement of files and directories in the system, 
which allows users and programs to predict the location of system files and directories. 


