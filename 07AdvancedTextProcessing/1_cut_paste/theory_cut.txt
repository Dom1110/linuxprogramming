CUT: Practical Guide
The cut command in Linux is used to cut portions of each line from a file or stream and outputs the result. 
It's especially useful for extracting specific fields/columns from a text file or command output. 
Below are some useful options of the cut command:

-f (field): Specifies the field(s) to be extracted.
-d (delimiter): Sets the field delimiter.
-c (characters): Cuts by character position.
--complement: Inverts the selection for cutting.

Understanding the Logic Behind cut in Linux
The cut command in Linux is utilized for manipulating textual data at the line level, 
extracting specified portions of each line from a file or stream. 
The fundamental logic behind cut revolves around treating text data as a 
series of records and fields, treating each line as a single record and the 
designated portions (e.g., characters or delimited sections) as fields.

Core Concepts:

1) Line as a Record:
Each line in the input (file/stream) is treated as a single record.
Processing is done line by line, treating each line independently.

2) Fields within a Line:
A field is a specific section or portion of a line.
Fields are typically determined by a delimiter, or by specific character positions.

How cut Works:

a) Read Line:
cut reads an input line, whether from a file or standard input.
b) Identify Fields:
Using the specified delimiter (-d option), cut divides the line into fields.
If the delimiter is a comma: one,two,three -> [one][two][three]
If character positions are specified (-c option), the specified characters are directly selected.

c) Extract and Output:
The fields/characters specified with -f or -c are extracted.
The extracted data is written to standard output.
This process is repeated for every line in the input.

Example.

Considering a text file data.txt with the following content:

apple,red,5
banana,yellow,6
cherry,red,20

The logic of cut would proceed as follows:

First Line Processing:

Line: apple,red,5
Fields (with -d','): [apple][red][5]
Extract (with -f2): red
Output: red
Second Line Processing:

Line: banana,yellow,6
Fields: [banana][yellow][6]
Extract: yellow
Output: yellow
... and so forth, for each subsequent line in the file or stream.

Practical example Applied on books.csv:


# Goal1: Find All Unique Genres of Book
cut -d',' -f4 books.csv|sort|uniq

# Goal2: Extract lines with Software Engineering, Keep only Title and Author
grep "Software Engineering" books.csv | cut -d',' -f1,2

alternatively :)

cut -d',' -f1,2 | grep "Software Engineering" books.csv  


I don't know which one is the better, probably grep first 