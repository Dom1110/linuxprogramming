Objective: Understand the importance of hashing passwords and basic web security principles.

Requirements:

Basic understanding of Python and Flask.
Understanding of HTML and JavaScript.
Tools:

Python with Flask.
A text editor or IDE.
Web browser with developer tools.

Part 1: Setting Up the Flask Application
1.1 Install Flask:

pip install flask


!!! If you do that project on repl.it
make sure to update 2 lines in 
.replit -> configuration file

entrypoint = "app.py"
[deployment]
run = ["python3", "app.py"]
deploymentTarget = "cloudrun"

1.2 Create a new folder for your project, e.g., flask_hashing_lab.

1.3 Inside the project folder, create the following structure:

A file named app.py.
A folder named templates with 2 HTML files: unsecured_form.html and submission_result.html.

!(Common mistake)IMPORTANT: Folder which contains html pages to render, must to be named "templates" it is a reserved word for Flask application with Python.
Most typos occur when students type template !

#templates/unsecured_form.html
<!DOCTYPE html>
<html>
<head>
    <title>Unsecured Form</title>
</head>
<body>
    <h2>Unsecured Form</h2>
    <form action="/submit" method="post">
        Username: <input type="text" name="username"><br>
        Password: <input type="password" name="password"><br>
        <input type="submit" value="Submit">
    </form>
</body>
</html>

#templates/submission_result.html
<!DOCTYPE html>
<html>
<head>
    <title>Submission Result</title>
</head>
<body>
    <h3>Submitted Data</h3>
    <p>Username: {{ username }}</p>
    <p>Password: {{ password }}</p>
</body>
</html>


Part 2: Unsecured Form
2.1 Edit app.py to set up a basic Flask application:

from flask import Flask, request, render_template, redirect, url_for

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('unsecured_form.html')

@app.route('/submit', methods=['POST'])
def submit():
    username = request.form.get('username')
    password = request.form.get('password')
    # Redirect to the result route with username and password as query parameters
    return redirect(url_for('result', username=username, password=password))

@app.route('/result')
def result():
    # Retrieve username and password from query parameters
    username = request.args.get('username')
    password = request.args.get('password')
    return render_template('submission_result.html', username=username, password=password)


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')


2.3 Run the application and access it in a web browser. Submit the form and observe how data is sent unencrypted.

Part 3: Secured Form with Hashing
3.1 Modify app.py to add a route for the secured form:


@app.route('/secured')
def secured_form():
    return render_template('secured_form.html')


3.2 Create 3d file insite of templates folder secured_form.html:


#templates/secured_form.html
<!DOCTYPE html>
<html>
<head>
    <title>Secured Form</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
    <script>
        function hashPassword() {
            var passwordInput = document.getElementById('password');
            passwordInput.value = CryptoJS.SHA256(passwordInput.value).toString();
            return true;
        }
    </script>
</head>
<body>
    <h2>Secured Form with Client-Side Hashing</h2>
    <form action="/submit" method="post" onsubmit="return hashPassword()">
        Username: <input type="text" name="username"><br>
        Password: <input type="password" id="password" name="password"><br>
        <input type="submit" value="Submit">
    </form>
</body>
</html>


3.3 Run the application again and access the secured form at /secured. Submit the form and observe how the password is hashed before being sent.

Part 4: Analysis and Discussion

4.1 Use browser developer tools to inspect network traffic for both forms. Observe the difference in how the password is sent.

4.2 Hashing is important, especially on the server side. Note that client-side hashing is not a substitute for HTTPS and server-side security measures.

Conclusion
This lab demonstrates the basic concept of hashing and its importance in web security. 
It provides a hands-on experience in implementing a simple web application with and without client-side hashing, 
highlighting the risks associated with sending data unencrypted.
