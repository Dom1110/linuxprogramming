
Lab1 Basic Ideas of Compiling

Make sure to install clang compiler
sudo apt install clang

Step 1: Compile the Source Code
First, write a simple C++ program in a file named hello_world.cpp.

#include <iostream>

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
Then, compile this code using clang++.

clang++ hello_world.cpp -o hello


Step 2: Delete Compiled File

rm hello


Step 3: Compile and Save Intermediate Files
Compile the code again, but this time save all the intermediate files.

clang++ -save-temps hello_world.cpp -o hello

You will see the following files generated:

hello_world.ii (preprocessed file)
hello_world.s (assembly code)
hello_world.o (object file)
hello (final executable)

Step 4: Perform Compilation Manually
Now, letâ€™s manually perform each compilation 
step and confirm that the intermediate files match.

a) Preprocess

clang++ -E hello_world.cpp -o manual_preprocessed.ii
diff manual_preprocessed.ii hello_world.ii


b) Compile to Assembly Code

clang++ -S manual_preprocessed.ii -o manual_compiled.s
diff manual_compiled.s hello_world.s

c) Assemble to Object Code

clang++ -c manual_compiled.s -o manual_assembled.o
diff manual_assembled.o hello_world.o


d) Linking

clang++ manual_assembled.o -o manual_hello
diff manual_hello hello

Confirmation
At each stage, using the diff command will confirm that the files generated manually 
are identical to the ones generated by the -save-temps option. If there is no output 
from the diff command, it indicates that the files are the same.

Summary
This tutorial guides you through compiling a C++ program, saving intermediate files, 
manually performing each compilation step, and confirming the intermediate files' integrity 
at each stage. It provides practical insight into the compilation and linking process